{
  "pack": {
    "name": "CSharp_OOP_Casual",
    "questions": [
      {"id":1,"topic":"C#","difficulty":"Easy","prompt":"What keyword defines a class in C#?","options":["class","struct","interface","new"],"correctIndex":0,"timeLimitSec":20,"explanation":"Use 'class' to declare a reference type."},
      {"id":2,"topic":"C#","difficulty":"Easy","prompt":"Which type is value type?","options":["struct","class","string","delegate"],"correctIndex":0,"timeLimitSec":20,"explanation":"struct is a value type; class is reference."},
      {"id":3,"topic":"OOP","difficulty":"Easy","prompt":"OOP pillar that means 'many forms'?","options":["Polymorphism","Abstraction","Encapsulation","Inheritance"],"correctIndex":0,"timeLimitSec":20,"explanation":"Polymorphism allows different implementations via a common interface."},
      {"id":4,"topic":"OOP","difficulty":"Easy","prompt":"Hide fields behind properties is called?","options":["Encapsulation","Polymorphism","Overloading","Sealing"],"correctIndex":0,"timeLimitSec":20,"explanation":"Encapsulation hides data behind public APIs."},
      {"id":5,"topic":"C#","difficulty":"Easy","prompt":"Keyword to allow override in derived class?","options":["virtual","override","sealed","static"],"correctIndex":0,"timeLimitSec":20,"explanation":"Mark base member virtual to allow overriding."},
      {"id":6,"topic":"C#","difficulty":"Easy","prompt":"Choose reference equality operator in C#","options":["object.ReferenceEquals","==","Equals","CompareTo"],"correctIndex":0,"timeLimitSec":20,"explanation":"ReferenceEquals checks reference identity."},
      {"id":7,"topic":"C#","difficulty":"Easy","prompt":"Which creates an object?","options":["new","var","using","typeof"],"correctIndex":0,"timeLimitSec":20,"explanation":"new allocates and calls constructor."},
      {"id":8,"topic":"C#","difficulty":"Easy","prompt":"Interface members are by default...","options":["abstract","virtual","sealed","static"],"correctIndex":0,"timeLimitSec":20,"explanation":"Interface members are implicitly abstract."},
      {"id":9,"topic":"C#","difficulty":"Easy","prompt":"What does 'override' require?","options":["virtual/base","sealed","static","readonly"],"correctIndex":0,"timeLimitSec":20,"explanation":"You can only override virtual/abstract base members."},
      {"id":10,"topic":"C#","difficulty":"Easy","prompt":"C# event is usually backed by a...","options":["delegate","Task","ActionBlock","Func<> only"],"correctIndex":0,"timeLimitSec":20,"explanation":"events wrap delegates to expose subscribe/raise semantics."},
      {"id":11,"topic":"OOP","difficulty":"Easy","prompt":"'is-a' relationship models...","options":["Inheritance","Composition","Aggregation","Association"],"correctIndex":0,"timeLimitSec":20,"explanation":"Inheritance expresses an is-a relationship."},
      {"id":12,"topic":"C#","difficulty":"Easy","prompt":"Keyword to prevent further derivation?","options":["sealed","static","readonly","private"],"correctIndex":0,"timeLimitSec":20,"explanation":"sealed prevents inheritance or overriding."},

      {"id":13,"topic":"C#","difficulty":"Medium","prompt":"Which access modifier exposes to same assembly?","options":["internal","protected","private","public"],"correctIndex":0,"timeLimitSec":25,"explanation":"internal limits access to the assembly."},
      {"id":14,"topic":"C#","difficulty":"Medium","prompt":"Abstract class can contain...","options":["implemented methods","only abstract","only static","only private"],"correctIndex":0,"timeLimitSec":25,"explanation":"Abstract classes can mix abstract and non-abstract members."},
      {"id":15,"topic":"C#","difficulty":"Medium","prompt":"Choose correct interface implementation syntax","options":["class C: IFoo","class C implements IFoo","class C <= IFoo","class C :interface IFoo"],"correctIndex":0,"timeLimitSec":25,"explanation":"Use colon to list base type and interfaces."},
      {"id":16,"topic":"C#","difficulty":"Medium","prompt":"Equals override must also override...","options":["GetHashCode","ToString","CompareTo","Dispose"],"correctIndex":0,"timeLimitSec":25,"explanation":"Override GetHashCode when overriding Equals."},
      {"id":17,"topic":"C#","difficulty":"Medium","prompt":"What is the benefit of readonly field?","options":["Can only assign in ctor","Faster than const","Thread-safe by default","Heap allocated"],"correctIndex":0,"timeLimitSec":25,"explanation":"readonly can be assigned at declaration or constructor."},
      {"id":18,"topic":"OOP","difficulty":"Medium","prompt":"Favor composition over inheritance because...","options":["Looser coupling","Faster calls","Less memory","No bugs"],"correctIndex":0,"timeLimitSec":25,"explanation":"Composition reduces tight coupling and increases flexibility."},
      {"id":19,"topic":"C#","difficulty":"Medium","prompt":"Record types are best for...","options":["immutable data","heavy logic","thread pools","unsafe code"],"correctIndex":0,"timeLimitSec":25,"explanation":"Records are ideal for immutable, value-like data."},
      {"id":20,"topic":"C#","difficulty":"Medium","prompt":"When to use struct instead of class?","options":["Small, immutable","Large graphs","Polymorphic hierarchies","Reference sharing"],"correctIndex":0,"timeLimitSec":25,"explanation":"Prefer struct for small, short-lived, immutable data."},

      {"id":21,"topic":"C#","difficulty":"Hard","prompt":"What must be true for a type to be used as a Dictionary key reliably?","options":["Stable Equals/GetHashCode","Reference type","Sealed","Has parameterless ctor"],"correctIndex":0,"timeLimitSec":30,"explanation":"Key equality must be consistent with a stable hash code."},
      {"id":22,"topic":"C#","difficulty":"Hard","prompt":"Which statement about IDisposable is correct?","options":["Dispose should be idempotent","Dispose must throw on second call","Finalize replaces Dispose","IDisposable only for unmanaged"],"correctIndex":0,"timeLimitSec":30,"explanation":"Dispose can be called multiple times safely."},
      {"id":23,"topic":"OOP","difficulty":"Hard","prompt":"Liskov Substitution Principle implies...","options":["Derived types must honor base contracts","Derived types can narrow preconditions","Derived types can break invariants","Derived can change return types incompatibly"],"correctIndex":0,"timeLimitSec":30,"explanation":"Subtypes must be substitutable without breaking correctness."},
      {"id":24,"topic":"C#","difficulty":"Hard","prompt":"Which override signature correctly matches Equals?","options":["public override bool Equals(object obj)","public override bool Equals<T>(T other)","public override int Equals(object obj)","public bool Equals(object obj)"],"correctIndex":0,"timeLimitSec":30,"explanation":"Equals must match object.Equals(object)."}
    ]
  }
}